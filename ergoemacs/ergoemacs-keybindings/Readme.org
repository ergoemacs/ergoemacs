#+TITLE: Ergoemacs Keybindings
#+AUTHOR: Xah Lee, David Capello, and Matthew Fidler

ErgoEmacs improves GNU Emacs for people who did not grew up with
emacs. User interface is based on common modern software interface
familiar to most people today, such as using 【Ctrl+C】 key for Copy,
【Ctrl+Z】 for undo, 【Ctrl+O】 for Open file, and also bundles many
elisp packages that are not in GNU Emacs.

* Standard Keyboard Shutcuts

Common keyboard shortcut are supported, so you don't have to change
your mindset when you switch in and out of emacs. The following are
supported standard keys in Windows, Mac OS X, and Linux. (Mac uses Cmd
instead of Ctrl.)

|---------------+--------------+----------------------|
| Standard name | Key press    | Emacs command name   |
|---------------+--------------+----------------------|
| Copy          | Ctrl+c       | kill-ring-save       |
| Cut           | Ctrl+x       | kill-region          |
| Paste         | Ctrl+v       | yank                 |
| Undo          | Ctrl+z       | undo                 |
| Redo          | Ctrl+Shift+z | redo                 |
| Redo          | Ctrl+y       | redo                 |
| Open New File | Ctrl+n       | new-empty-buffer     |
| Open          | Ctrl+o       | find-file            |
| Close         | Ctrl+w       | close-current-buffer |
| Save          | Ctrl+s       | save-buffer          |
| Save As       | Ctrl+Shift+s | write-file           |
| Print         | Ctrl+p       | print-buffer         |
| Select All    | Ctrl+a       | mark-whole-buffer    |
| Find          | Ctrl+f       | search-forward       |
|---------------+--------------+----------------------|

Standard shortcuts for cursor navigation are also supported. Example:
【Ctrl+Left】 ⇒ go to previous word, ↖ Home ⇒ beginning of line, 【⇧
Shift+Down】 ⇒ selecting text downward

* Window/Tab Switching
The following are some new commands that lets you easily switch
windows or buffers.

|-----------------+----------------------------+--------------------------|
| Standard name   | Key press                  | Emacs command name       |
|-----------------+----------------------------+--------------------------|
| Next Window     | 【Alt+`】                  | switch-to-next-frame     |
| Previous Window | 【Alt+~】                  | switch-to-previous-frame |
| Next Tab        | 【Ctrl+⇟PageDown▽】        | next-user-buffer         |
| Previous Tab    | 【Ctrl+⇞PageUp△】          | previous-user-buffer     |
| NA              | 【Ctrl+⇧Shift+⇟PageDown▽】 | next-emacs-buffer        |
| NA              | 【Ctrl+⇧Shift+⇞PageUp △】  | previous-emacs-buffer    |
|-----------------+----------------------------+--------------------------|

* Shrink-whitespaces, compact/uncompact-block, toggle-letter-case
The following are new commands that combine the functionality of
several similar commands into one. This way, you have one single
command with one single shortcut to remember. They do what you want
depending on context.

|-------------------------+-----------+-----------------------------------------|
| Name                    | Shortcut  | Description                             |
|-------------------------+-----------+-----------------------------------------|
| shrink-whitespaces      | 【Alt+w】 | Takes out spaces/tabs around cursor     |
| compact-uncompact-block | 【Alt+q】 | Hard Wraps or unwraps text             u |
| toggle-letter-case      | 【Alt+/】 | Change capitilzation (ALL, First,lower) |
|-------------------------+-----------+-----------------------------------------|

* Fast/Ergonomic Shortcuts
* Layouts Supported
* Tips for adopting ErgoEmacs Keybindings
If you are a long time emacs user, you may find it painful to adopt
this setup.

This difficulty is nothing special. It's the same difficulty when you
switching to dvorak after years of qwerty. Basically, it's about
changing muscle memory.

** Where Did My Command Go?
The ergonomic-mode minor mode features the command
where-is-old-binding, with shortcut “Ctrl+h o”. This command asks you
to type a shortcut, and tells you which command it was bound in GNU
Emacs, and the new shortcut for it under ErgoEmacs?.

** Shortcut To Open Cheatsheet

** Gradual Adoption for an Emacs User
Here's some tips that may help you adopt.
*** Level 1
If you find it too painful to switch, don't use the whole package. Instead, start off with just the arrow key movements.
#+BEGIN_SRC emacs-lisp
  (setq ergoemacs-variant "lvl1")
  (ergoemacs-mode 1)
#+END_SRC
Either put the above in your emacs init file (usually at “~/.emacs”), or customize ergoemacs-mode to set the variant to lvl1.

With only the above change, you will increase your emacs productivity, especially if you are a touch typist. These single char cursor moving commands are the top 4 most frequently used emacs commands by statistics, roughly accounting for 43% of commands that have a shortcut.


Once you used the above for a couple of weeks, you may add more keys to adopt.

*** Level 2
Adding keys for moving around words and deleting words.

#+BEGIN_SRC emacs-lisp
  (setq ergoemacs-variant "lvl2")
  (ergoemacs-mode 1)
#+END_SRC
*** Level 3
Try to use the full ergoemacs mode.
#+BEGIN_SRC emacs-lisp
  (setq ergoemacs-variant nil)
  (ergoemacs-mode 1)
#+END_SRC
*** Guru
The guru variant takes away the arrow keys and page up/page down keys.

#+BEGIN_SRC emacs-lisp
  (setq ergoemacs-variant "guru")
  (ergoemacs-mode 1)
#+END_SRC
*** Master
The Master variant takes away the backspace.  This key is not
particularly ergonomic, and can cause possible pinky issues.
Changing this means that you may wish to try to get ergoemacs
bindings everywhere.

#+BEGIN_SRC emacs-lisp
  (setq ergoemacs-variant "master")
  (ergoemacs-mode 1)
#+END_SRC

* Changing key layouts or adding variants
** Globally defined keys
These keys are defined on the global keymap and should be retained
regardless of the variant or layout used.  However, these keys will
not show up on keyboard documentation generated by ergoemacs.
Additionally, these keys may be masked or remapped by other programs.
** Ergoemacs defined keys
These keys are defined in the ergoemacs-keymap.  When the layout
changes by changing options, these keys are lost.  However, you may
create your own variant to allow these keys to be saved.
*** Adding a ergonomic key
Ergonomic keys can be added by:
#+BEGIN_SRC emacs-lisp
  (ergoemacs-key "M-a" 'execute-extended-command "Execute")
#+END_SRC

This adds the Alt-a command to all keyboards based on the QWERTY
layout.  This only applies to the currently selected keyboard variant.


Note the last parameter is optional and allows Ergoemacs to document
that this is an "Execute" command when generating keyboard layout diagrams.
*** Adding a fixed key
Fixed keys can be added by:
#+BEGIN_SRC emacs-lisp
  (ergoemacs-fixed-key "C-o" 'ido-find-file "Open File")
#+END_SRC

This adds the fixed key to the currently selected emacs variant

Note the last parameter is optional and allows Ergoemacs to document
that this is an "Open" command when generating keyboard layout diagrams.

*** Adding an ergonomic key map with fixed mappings
When you want to add an ergonomic keymap with fixed mappings such as
the ergoprog variant you can add them as follows:

#+BEGIN_SRC emacs-lisp
  (ergoemacs-key "M-m s" 'save-buffer "" t)
#+END_SRC

This converts the QWERTY M-m keybinding and the fixed keybinding s to
save buffer

*** Creating a keyboard variant
* Ergoemacs Keys System wide
** Bash
** Windows
In windows some of the ergoemacs keys are implemented system wide by
assuming apps follow the CUA-style keys like CTRL-f for find, CTRL-h
for replace.  This also optionally implements:
- CapsLock as Menu in emacs
** Mac OS X
* Developer information
** Layouts
All the layouts in ergoemacs are easy to generate.  To add your own
personal layout you just need to match the keybindings for your in a
layout variable from =ergoemacs-layout-XXX=.  For the US and UK
layouts, the defining variable adds the layout:

#+BEGIN_SRC emacs-lisp
  (defvar ergoemacs-layout-us
    '("" "`" "1" "2" "3" "4" "5" "6" "7" "8" "9" "0" "-" "=" ""
      "" ""  "q" "w" "e" "r" "t" "y" "u" "i" "o" "p" "[" "]" "\\"
      "" ""  "a" "s" "d" "f" "g" "h" "j" "k" "l" ";" "'" "" ""
      "" ""  "z" "x" "c" "v" "b" "n" "m" "," "." "/" "" "" ""
      ;; Shifted
      "" "~" "!" "@" "#" "$" "%" "^" "&" "*" "(" ")" "_" "+" ""
      "" ""  "Q" "W" "E" "R" "T" "Y" "U" "I" "O" "P" "{" "}" "|"
      "" ""  "A" "S" "D" "F" "G" "H" "J" "K" "L" ":" "\"" "" ""
      "" ""  "Z" "X" "C" "V" "B" "N" "M" "<" ">" "?" "" "" "")
    "US Engilsh QWERTY Keyboard")
  
  (defvar ergoemacs-layout-gb
    '("" "`" "1" "2" "3" "4" "5" "6" "7" "8" "9" "0" "-" "=" ""
      "" ""  "q" "w" "e" "r" "t" "y" "u" "i" "o" "p" "[" "]" ""
      "" ""  "a" "s" "d" "f" "g" "h" "j" "k" "l" ";" "'" "#" ""
      "" "\\"  "z" "x" "c" "v" "b" "n" "m" "," "." "/" "" "" ""
      ;; Shifted
      "" "¬" "!" "@" "#" "$" "%" "^" "&" "*" "(" ")" "_" "+" ""
      "" ""  "Q" "W" "E" "R" "T" "Y" "U" "I" "O" "P" "{" "}" ""
      "" ""  "A" "S" "D" "F" "G" "H" "J" "K" "L" ":" "@" "~" ""
      "" "|"  "Z" "X" "C" "V" "B" "N" "M" "<" ">" "?" "" "" "")
    "UK QWERTY")
#+END_SRC

This lists the keyboard positions from left to right for the unshifted
and shifted states of he keyboard.  After listing the keyboard
descriptions it provides a description of the layout which is used for
the customization variable `ergoemacs-keyboard-layout'.  By simply
defining your layout before ergoemacs-mode is loaded, you add it to
the ergoemacs-keyboard-layout variable with its description.
** Customizing/Saving the variables
You can customize the ergoemacs keybindings by typing M-x
customize-group ergoemacs-mode

** Extras
To generate keyboard binding diagrams and scripts that allow you to
use ergoemacs elsewhere, please type M-x ergoemacs-extra.  These
scripts will be stored under the extras directory.

Note that if you use an alternative layout on a QWERTY keyboard (such
as colemak), and use the portable colemak layout, to use ergoemacs
keys use the us layout not the colemak layout.  However, if you
installed the colemak keyboard layout to your system, use the colemak
not the US layout variant.

** Updating Ergoemacs for the latest version of emacs
To tell if a key was a globally defined emacs key, ergoemacs needs to
know what key was defined by emacs.  This typically changes a little
for each emacs version.  This is due to renamed functions, or
re-purposed keys.  To update for the current version of emacs, you
can type

#+BEGIN_SRC emacs-lisp
  (ergoemacs-warn-globally-changed-keys t)
#+END_SRC

This is also done in the test suite.  This can be accessed by
=ergoemacs-test= command.


